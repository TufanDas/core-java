There aer 4 types of inner class

member inner class
static nested class
local inner class
Anonymous inner class

✅ What Is a Non-static Inner Class (Member Class)?
A non-static inner class is a class defined inside another class — but it is not static. That means it belongs to an object of the outer class, not the class itself.

Think of it like this:
        If the outer class is a car, the inner class is the engine. The engine can’t exist without the car. It’s part of it and depends on it.

🧠 Why Use It?
It helps you group classes that only make sense together.
It can access private variables of the outer class.
It keeps your code more organized and readable.


🔤 Simple Example:

public class Car {
    private String engineType = "V8";

    // Non-static inner class
    class Engine {
        void start() {
            System.out.println("Starting " + engineType + " engine...");
        }
    }

    public static void main(String[] args) {
        Car myCar = new Car();              // Create outer class object
        Car.Engine myEngine = myCar.new Engine();  // Create inner class object using outer class's object
        myEngine.start();                   // Call inner class method
    }
}


🔍 Explanation:
Car is the outer class.
Engine is a non-static inner class inside Car.(can create objects)
Engine class can access engineType(outer class's instance variable), even though it’s private property.
We create the outer class first, then use it to create the inner class.(inner class use the property of outer class even its private property)


🌍 Real-World Analogy:

outer class -> Laptop
inner class -> Keyboard
    The keyboard makes no sense on its own. It only exists because of the laptop
    So in Java, you'd model this with a non-static inner class:

Example:

public class Laptop { // outer class
    private String brand = "Dell";

    class Keyboard { // inner class
        void type() {
            System.out.println("Typing on " + brand + " laptop keyboard."); // accessing the private property of the outer class
        }
    }
}



⚠️ Common Beginner Pitfalls:

| Mistake                                                             | What Happens                            | How to Avoid                                                              |
| ------------------------------------------------------------------- | --------------------------------------- | ------------------------------------------------------------------------- |
| ❌ Trying to create the inner class without an outer class instance  | You get a **compiler error**            | ✅ Always create the outer class first, then `outer.new Inner()`           |
| ❌ Thinking inner class is static                                    | Can't access non-static fields properly | ✅ Remember: **non-static inner class depends on outer object**            |
| ❌ Accessing inner class from `static main()` without outer instance | Error                                   | ✅ Make sure to use `new Outer().new Inner()` syntax in `main()`           |
| ❌ Overusing inner classes                                           | Code becomes confusing                  | ✅ Use them only when the inner class logically belongs to the outer class |



📌 Summary:

A non-static inner class belongs to an instance of its outer class.
It helps model “part-of” relationships like Car → Engine or Laptop → Keyboard.
Always create the outer object before creating the inner one.
It can access private members of the outer class directly.

